11.3颠倒二进制位
11.3.1算法要求
颠倒给定的32位无符号整数的二进制位
eg1:011
110=6

提示：在某些语言例如java中，没有无符号整数类型，在这种情况下输入和输出被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号还是没符号，内部二进制表现形式一样。
在java中编译器使用二进制补充记法来表示有符号整数。因此在上面的eg2中，输入有符号整数-3，输出有符号整数-1073741825

进阶：如果多次调用这个函数，将如何优化你的算法？

11.3.2解题思路
这一题在二进制数上下功夫，把整数变成二进制后颠倒顺序，再整数，需要注意的是，颠倒前去掉二进制标识位0b。

class Solution:
    def reverseBits(self, n: int) -> int:
        dec2bin=bin(n)
        newBin=dec2bin[::-1][:-2]

        if len(newBin)<32:
        	newBin+="0"*(32-len(newBin))
        newDec=int(newBin,base=2) #转换回整数
        return newDec

方法2:位运算分治（follow-up）
思路：
若要翻转一个二进制串，可以均分为两部分，对每个部分递归反转，然后把左半部分拼接在右半部分后面，完成翻转。由于左右两部分的计算方式是相似的，利用位掩码和位移运算，可以从下往上完成分治。

对于递归最底层，交换所有奇数偶数位：
1.取出所有奇数偶数位
2.把奇数位放在偶数位，偶数移到奇数

类似地，对于倒数第二层，每两位分一组，按组号取出所有，位移。


进阶：如果多次调用这个函数，将如何优化你的算法？